import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function updateUserProfiles() {
  console.log('üîÑ Mise √† jour des profils utilisateurs...');

  try {
    // Exemples d'utilisateurs avec des noms en fran√ßais et en arabe
    const userUpdates = [
      {
        email: 'admin@geps.ma',
        firstName: 'Ahmed',
        lastName: 'Benali',
        firstNameAr: 'ÿ£ÿ≠ŸÖÿØ',
        lastNameAr: 'ÿ®ŸÜ ÿπŸÑŸä',
        gender: 'HOMME' as const,
        phone: '+212612345678'
      },
      {
        email: 'directeur@geps.ma',
        firstName: 'Fatima',
        lastName: 'Zahra',
        firstNameAr: 'ŸÅÿßÿ∑ŸÖÿ©',
        lastNameAr: 'ÿßŸÑÿ≤Ÿáÿ±ÿßÿ°',
        gender: 'FEMME' as const,
        phone: '+212698765432'
      },
      {
        email: 'accueil@geps.ma',
        firstName: 'Mohamed',
        lastName: 'Alami',
        firstNameAr: 'ŸÖÿ≠ŸÖÿØ',
        lastNameAr: 'ÿßŸÑÿπŸÑŸÖŸä',
        gender: 'HOMME' as const,
        phone: '+212687654321'
      },
      {
        email: 'assistante@geps.ma',
        firstName: 'Aicha',
        lastName: 'Benjelloun',
        firstNameAr: 'ÿπÿßÿ¶ÿ¥ÿ©',
        lastNameAr: 'ÿ®ŸÜ ÿ¨ŸÑŸàŸÜ',
        gender: 'FEMME' as const,
        phone: '+212676543210'
      }
    ];

    for (const userData of userUpdates) {
      const existingUser = await prisma.user.findUnique({
        where: { email: userData.email }
      });

      if (existingUser) {
        await prisma.user.update({
          where: { email: userData.email },
          data: {
            firstName: userData.firstName,
            lastName: userData.lastName,
            firstNameAr: userData.firstNameAr,
            lastNameAr: userData.lastNameAr,
            gender: userData.gender,
            phone: userData.phone,
            dateOfBirth: new Date('1990-01-01') // Date de naissance par d√©faut
          }
        });
        
        console.log(`‚úÖ Utilisateur mis √† jour: ${userData.firstName} ${userData.lastName} (${userData.firstNameAr} ${userData.lastNameAr})`);
      } else {
        console.log(`‚ö†Ô∏è  Utilisateur non trouv√©: ${userData.email}`);
      }
    }

    console.log('‚úÖ Mise √† jour des profils utilisateurs termin√©e !');
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour des profils utilisateurs:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  updateUserProfiles()
    .then(() => {
      console.log('Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Erreur lors de l\'ex√©cution du script:', error);
      process.exit(1);
    });
}

export { updateUserProfiles };
