app OpenSaaS {
  wasp: {
    version: "^0.17.0"
  },

  title: "GEPS",

  head: [
    "<link rel='icon' href='/favicon.ico' />",
    "<meta charset='utf-8' />",
    "<meta name='description' content='Your apps main description and features.' />",
    "<meta name='author' content='Your (App) Name' />",
    "<meta name='keywords' content='saas, solution, product, app, service' />",
    
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='Your Open SaaS App' />",
    "<meta property='og:site_name' content='Your Open SaaS App' />",
    "<meta property='og:url' content='https://your-saas-app.com' />",
    "<meta property='og:description' content='Your apps main description and features.' />",
    "<meta property='og:image' content='https://your-saas-app.com/public-banner.webp' />",
    "<meta name='twitter:image' content='https://your-saas-app.com/public-banner.webp' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
    // TODO: You can put your Plausible analytics scripts below (https://docs.opensaas.sh/guides/analytics/):
    // NOTE: Plausible does not use Cookies, so you can simply add the scripts here.
    // Google, on the other hand, does, so you must instead add the script dynamically
    // via the Cookie Consent component after the user clicks the "Accept" cookies button.
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.js'></script>",  // for production
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.local.js'></script>",  // for development
  ],

  // üîê Auth out of the box! https://wasp.sh/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // NOTE: If you decide to not use email auth, make sure to also delete the related routes and pages below.
      //   (RequestPasswordReset(Route|Page), PasswordReset(Route|Page), EmailVerification(Route|Page))
      email: {
        fromField: {
          name: "Open SaaS App",
          email: "me@example.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable Google Auth (check https://wasp.sh/docs/auth/social-auth/google for setup instructions):
      // google: { // Guide for setting up Auth via Google
      //   userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable GitHub Auth (check https://wasp.sh/docs/auth/social-auth/github for setup instructions):
      // gitHub: {
      //   userSignupFields: import { getGitHubUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGitHubAuthConfig } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable Discord Auth (check https://wasp.sh/docs/auth/social-auth/discord for setup instructions):
      // discord: {
      //   userSignupFields: import { getDiscordUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getDiscordAuthConfig } from "@src/auth/userSignupFields"
      // }
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/dashboard",
  },

  db: {
    // Run `wasp db seed` to seed the database with the seed functions below:
    seeds: [
      // Cr√©e l'organisation par d√©faut GEPS Demo
      import { createDefaultOrganization } from "@src/server/dbSeeds",
      // Organisation Ibtisama avec utilisateurs de base
      import { seedIbtisamaSimple } from "@src/server/seedIbtisamaSimple",
    ]
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },

  emailSender: {
    // NOTE: "Dummy" provider is just for local development purposes.
    //   Make sure to check the server logs for the email confirmation url (it will not be sent to an address)!
    //   Once you are ready for production, switch to e.g. "SendGrid" or "Mailgun" providers. Check out https://docs.opensaas.sh/guides/email-sending/ .
    provider: Dummy,
    defaultFrom: {
      name: "Open SaaS App",
      // When using a real provider, e.g. SendGrid, you must use the same email address that you configured your account to send out emails with!
      email: "me@example.com"
    },
  },
}



route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/landing-page/LandingPage"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordResetPage } from "@src/auth/email-and-pass/RequestPasswordResetPage",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/auth/email-and-pass/PasswordResetPage",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/auth/email-and-pass/EmailVerificationPage",
}

route PendingApprovalRoute { path: "/pending-approval", to: PendingApprovalPage }
page PendingApprovalPage {
  authRequired: true,
  component: import PendingApprovalPage from "@src/auth/PendingApprovalPage"
}
//#endregion

//#region User
route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import UserProfilePage from "@src/user/UserProfilePage"
}
//#endregion

//#region Demo AI App
route DemoAppRoute { path: "/demo-app", to: DemoAppPage }
page DemoAppPage {
  authRequired: true,
  component: import DemoAppPage from "@src/demo-ai-app/DemoAppPage"
}

//#region File Upload
route FileUploadRoute { path: "/file-upload", to: FileUploadPage }
page FileUploadPage {
  authRequired: true,
  component: import FileUpload from "@src/file-upload/FileUploadPage"
}

action createFile {
  fn: import { createFile } from "@src/file-upload/operations",
  entities: [User, File]
}

query getAllFilesByUser {
  fn: import { getAllFilesByUser } from "@src/file-upload/operations",
  entities: [User, File]
}

query getDownloadFileSignedURL {
  fn: import { getDownloadFileSignedURL } from "@src/file-upload/operations",
  entities: [User, File]
}
//#endregion

//#region GEPS Dashboard
route DashboardRoute { path: "/dashboard", to: DashboardPage }
page DashboardPage {
  authRequired: true,
  component: import Dashboard from "@src/dashboard/DashboardPage"
}

// B√©n√©ficiaires
route BeneficiariesRoute { path: "/beneficiaries", to: BeneficiariesPage }
page BeneficiariesPage {
  authRequired: true,
  component: import BeneficiariesPage from "@src/beneficiaries/BeneficiariesPage"
}

route BeneficiaryDetailRoute { path: "/beneficiaries/:id", to: BeneficiaryDetailPage }
page BeneficiaryDetailPage {
  authRequired: true,
  component: import BeneficiaryDetailPage from "@src/beneficiaries/BeneficiaryDetailPage"
}

// Documents
route DocumentsRoute { path: "/documents", to: DocumentsPage }
page DocumentsPage {
  authRequired: true,
  component: import DocumentsPage from "@src/documents/DocumentsPage"
}

// Interventions Sociales
route InterventionsRoute { path: "/interventions", to: InterventionsPage }
page InterventionsPage {
  authRequired: true,
  component: import InterventionsPage from "@src/interventions/InterventionsPage"
}

// H√©bergement
route AccommodationRoute { path: "/accommodation", to: AccommodationPage }
page AccommodationPage {
  authRequired: true,
  component: import AccommodationPage from "@src/accommodation/AccommodationPage"
}

// Repas
route MealsRoute { path: "/meals", to: MealsPage }
page MealsPage {
  authRequired: true,
  component: import MealsPage from "@src/meals/MealsPage"
}

// Ressources
route ResourcesRoute { path: "/resources", to: ResourcesPage }
page ResourcesPage {
  authRequired: true,
  component: import ResourcesPage from "@src/resources/ResourcesPage"
}

// √âducation
route EducationRoute { path: "/education", to: EducationPage }
page EducationPage {
  authRequired: true,
  component: import EducationPage from "@src/education/EducationPage"
}

// Activit√©s
route ActivitiesRoute { path: "/activities", to: ActivitiesPage }
page ActivitiesPage {
  authRequired: true,
  component: import ActivitiesPage from "@src/activities/ActivitiesPage"
}

// Formations
route TrainingRoute { path: "/training", to: TrainingPage }
page TrainingPage {
  authRequired: true,
  component: import TrainingPage from "@src/training/TrainingPage"
}

// Projets Entrepreneuriaux
route ProjectsRoute { path: "/projects", to: ProjectsPage }
page ProjectsPage {
  authRequired: true,
  component: import ProjectsPage from "@src/projects/ProjectsPage"
}

// Budget
route BudgetRoute { path: "/budget", to: BudgetPage }
page BudgetPage {
  authRequired: true,
  component: import BudgetPage from "@src/budget/BudgetPage"
}

// Administration
route AdminRoute { path: "/admin", to: AdminPage }
page AdminPage {
  authRequired: true,
  component: import AdminPage from "@src/admin/AdminPage"
}

// Notifications
route NotificationsRoute { path: "/notifications", to: NotificationsPage }
page NotificationsPage {
  authRequired: true,
  component: import NotificationsPage from "@src/notifications/NotificationsPage"
}

// Time Tracking - Suivi du temps
route TimeTrackingRoute { path: "/time-tracking", to: TimeTrackingPage }
page TimeTrackingPage {
  authRequired: true,
  component: import TimeTrackingPage from "@src/time-tracking/TimeTrackingPage"
}

// Op√©rations d'administration
query getAllUsers {
  fn: import { getAllUsers } from "@src/admin/operations",
  entities: [User]
}

action approveUser {
  fn: import { approveUser } from "@src/admin/operations",
  entities: [User]
}

action rejectUser {
  fn: import { rejectUser } from "@src/admin/operations",
  entities: [User]
}

action updateUserRole {
  fn: import { updateUserRole } from "@src/admin/operations",
  entities: [User]
}

action toggleUserStatus {
  fn: import { toggleUserStatus } from "@src/admin/operations",
  entities: [User]
}

query getCurrentUser {
  fn: import { getCurrentUser } from "@src/user/operations",
  entities: [User]
}

action updateUserProfile {
  fn: import { updateUserProfile } from "@src/user/operations",
  entities: [User]
}

// === GESTION DES R√îLES ET PERMISSIONS ===

// Queries pour les r√¥les
query getRoles {
  fn: import { getRoles } from "@src/admin/roleManagement/operations",
  entities: [Role, Permission, User]
}

query getRoleDetails {
  fn: import { getRoleDetails } from "@src/admin/roleManagement/operations",
  entities: [Role, Permission, User]
}

// Actions pour les r√¥les
action createRole {
  fn: import { createRole } from "@src/admin/roleManagement/operations",
  entities: [Role, Permission]
}

action updateRole {
  fn: import { updateRole } from "@src/admin/roleManagement/operations",
  entities: [Role, Permission]
}

action deleteRole {
  fn: import { deleteRole } from "@src/admin/roleManagement/operations",
  entities: [Role, Permission, User]
}

// Actions pour les permissions
action addPermission {
  fn: import { addPermission } from "@src/admin/roleManagement/operations",
  entities: [Role, Permission]
}

action updatePermission {
  fn: import { updatePermission } from "@src/admin/roleManagement/operations",
  entities: [Role, Permission]
}

action removePermission {
  fn: import { removePermission } from "@src/admin/roleManagement/operations",
  entities: [Role, Permission]
}

// Action pour assigner un r√¥le √† un utilisateur
action assignRoleToUser {
  fn: import { assignRoleToUser } from "@src/admin/roleManagement/operations",
  entities: [Role, Permission, User]
}

// Page de gestion des r√¥les
route RoleManagementRoute { path: "/admin/roles", to: RoleManagementPage }
page RoleManagementPage {
  authRequired: true,
  component: import RoleManagementPage from "@src/admin/roleManagement/RoleManagementPage"
}

// Page de gestion de l'organisation
route OrganizationManagementRoute { path: "/admin/organization", to: OrganizationManagementPage }
page OrganizationManagementPage {
  authRequired: true,
  component: import OrganizationPage from "@src/admin/organization/OrganizationPage"
}

// Op√©rations pour la gestion de l'organisation
query getCurrentOrganization {
  fn: import { getCurrentOrganization } from "@src/admin/organization/operations",
  entities: [Organization, User]
}

action updateOrganization {
  fn: import { updateOrganization } from "@src/admin/organization/operations",
  entities: [Organization, User]
}

// Op√©rations CRUD pour tous les modules
// B√©n√©ficiaires
query getAllBeneficiaries {
  fn: import { getAllBeneficiaries } from "@src/beneficiaries/operations",
  entities: [Beneficiary, User]
}

query getBeneficiaryById {
  fn: import { getBeneficiaryById } from "@src/beneficiaries/operations",
  entities: [Beneficiary, User, Document, Stay, Meal, ActivityParticipation, EntrepreneurialProject, Enrollment, Education]
}

action createBeneficiary {
  fn: import { createBeneficiary } from "@src/beneficiaries/operations",
  entities: [Beneficiary, User, Notification]
}

action updateBeneficiary {
  fn: import { updateBeneficiary } from "@src/beneficiaries/operations",
  entities: [Beneficiary, User]
}

action deleteBeneficiary {
  fn: import { deleteBeneficiary } from "@src/beneficiaries/operations",
  entities: [Beneficiary, User]
}

// Documents
query getAllDocuments {
  fn: import { getAllDocuments } from "@src/documents/operations",
  entities: [Document, Beneficiary, User]
}

action createDocument {
  fn: import { createDocument } from "@src/documents/operations",
  entities: [Document, Beneficiary, User]
}

action updateDocument {
  fn: import { updateDocument } from "@src/documents/operations",
  entities: [Document, User]
}

action deleteDocument {
  fn: import { deleteDocument } from "@src/documents/operations",
  entities: [Document, User]
}

// Interventions Sociales
query getAllInterventions {
  fn: import { getAllInterventions } from "@src/interventions/operations",
  entities: [SocialIntervention, User]
}

action createIntervention {
  fn: import { createIntervention } from "@src/interventions/operations",
  entities: [SocialIntervention, User]
}

action updateIntervention {
  fn: import { updateIntervention } from "@src/interventions/operations",
  entities: [SocialIntervention, User]
}

action deleteIntervention {
  fn: import { deleteIntervention } from "@src/interventions/operations",
  entities: [SocialIntervention, User]
}

// H√©bergement
query getAllStays {
  fn: import { getAllStays } from "@src/accommodation/operations",
  entities: [Stay, Beneficiary, User]
}

action createStay {
  fn: import { createStay } from "@src/accommodation/operations",
  entities: [Stay, Beneficiary, User]
}

action updateStay {
  fn: import { updateStay } from "@src/accommodation/operations",
  entities: [Stay, User]
}

action deleteStay {
  fn: import { deleteStay } from "@src/accommodation/operations",
  entities: [Stay, User]
}

// Repas
query getAllMeals {
  fn: import { getAllMeals } from "@src/meals/operations",
  entities: [Meal, Beneficiary, User]
}

action createMeal {
  fn: import { createMeal } from "@src/meals/operations",
  entities: [Meal, Beneficiary, User]
}

action updateMeal {
  fn: import { updateMeal } from "@src/meals/operations",
  entities: [Meal, User]
}

action deleteMeal {
  fn: import { deleteMeal } from "@src/meals/operations",
  entities: [Meal, User]
}

// Ressources
query getAllResources {
  fn: import { getAllResources } from "@src/resources/operations",
  entities: [Resource]
}

action createResource {
  fn: import { createResource } from "@src/resources/operations",
  entities: [Resource]
}

action updateResource {
  fn: import { updateResource } from "@src/resources/operations",
  entities: [Resource]
}

action deleteResource {
  fn: import { deleteResource } from "@src/resources/operations",
  entities: [Resource]
}

// √âducation
query getAllEducations {
  fn: import { getAllEducations } from "@src/education/operations",
  entities: [Education, Beneficiary, User]
}

action createEducation {
  fn: import { createEducation } from "@src/education/operations",
  entities: [Education, Beneficiary, User]
}

action updateEducation {
  fn: import { updateEducation } from "@src/education/operations",
  entities: [Education, User]
}

action deleteEducation {
  fn: import { deleteEducation } from "@src/education/operations",
  entities: [Education, User]
}

// Activit√©s
query getAllActivities {
  fn: import { getAllActivities } from "@src/activities/operations",
  entities: [Activity, User, ActivityParticipation, Beneficiary]
}

action createActivity {
  fn: import { createActivity } from "@src/activities/operations",
  entities: [Activity, User]
}

action updateActivity {
  fn: import { updateActivity } from "@src/activities/operations",
  entities: [Activity, User]
}

action deleteActivity {
  fn: import { deleteActivity } from "@src/activities/operations",
  entities: [Activity, User]
}

// Formations
query getAllTraining {
  fn: import { getAllTraining } from "@src/training/operations",
  entities: [Training, User, Beneficiary]
}

action createTraining {
  fn: import { createTraining } from "@src/training/operations",
  entities: [Training, User]
}

action updateTraining {
  fn: import { updateTraining } from "@src/training/operations",
  entities: [Training, User]
}

action deleteTraining {
  fn: import { deleteTraining } from "@src/training/operations",
  entities: [Training, User]
}

// Projets Entrepreneuriaux
query getAllProjects {
  fn: import { getAllProjects } from "@src/projects/operations",
  entities: [EntrepreneurialProject, Beneficiary, User]
}

action createProject {
  fn: import { createProject } from "@src/projects/operations",
  entities: [EntrepreneurialProject, Beneficiary, User]
}

action updateProject {
  fn: import { updateProject } from "@src/projects/operations",
  entities: [EntrepreneurialProject, User]
}

action deleteProject {
  fn: import { deleteProject } from "@src/projects/operations",
  entities: [EntrepreneurialProject, User]
}

// Budget
query getAllBudgets {
  fn: import { getAllBudgets } from "@src/budget/operations",
  entities: [Budget, User, Expense, Revenue]
}

action createBudget {
  fn: import { createBudget } from "@src/budget/operations",
  entities: [Budget, User]
}

action updateBudget {
  fn: import { updateBudget } from "@src/budget/operations",
  entities: [Budget, User]
}

action deleteBudget {
  fn: import { deleteBudget } from "@src/budget/operations",
  entities: [Budget, User]
}

action createExpense {
  fn: import { createExpense } from "@src/budget/operations",
  entities: [Expense, Budget, User]
}

action createRevenue {
  fn: import { createRevenue } from "@src/budget/operations",
  entities: [Revenue, Budget, User]
}

// Time Tracking - Suivi du temps pass√© sur les dossiers
action startTimeSession {
  fn: import { startTimeSession } from "@src/time-tracking/operations",
  entities: [TimeSession, User, Beneficiary]
}

action endTimeSession {
  fn: import { endTimeSession } from "@src/time-tracking/operations",
  entities: [TimeSession, User, Beneficiary]
}

query getActiveTimeSession {
  fn: import { getActiveTimeSession } from "@src/time-tracking/operations",
  entities: [TimeSession, User, Beneficiary]
}

query getTimeSessionHistory {
  fn: import { getTimeSessionHistory } from "@src/time-tracking/operations",
  entities: [TimeSession, User, Beneficiary]
}

query getBeneficiaryTimeStats {
  fn: import { getBeneficiaryTimeStats } from "@src/time-tracking/operations",
  entities: [TimeSession, User, Beneficiary]
}

// Notifications
query getAllNotifications {
  fn: import { getAllNotifications } from "@src/notifications/operations",
  entities: [Notification, User, Beneficiary]
}

query getUnreadNotifications {
  fn: import { getUnreadNotifications } from "@src/notifications/operations",
  entities: [Notification, User, Beneficiary]
}

action createNotification {
  fn: import { createNotification } from "@src/notifications/operations",
  entities: [Notification, User, Beneficiary]
}

action markNotificationAsRead {
  fn: import { markNotificationAsRead } from "@src/notifications/operations",
  entities: [Notification, User]
}

action orientBeneficiary {
  fn: import { orientBeneficiary } from "@src/notifications/operations",
  entities: [Beneficiary, User, Notification]
}

action assignBeneficiary {
  fn: import { assignBeneficiary } from "@src/beneficiaries/operations",
  entities: [Beneficiary, User, Notification]
}

query getAssistantesSociales {
  fn: import { getAssistantesSociales } from "@src/notifications/operations",
  entities: [User]
}
//#endregion

// #region Dashboard
query getDashboardStats {
  fn: import { getDashboardStats } from "@src/dashboard/operations",
  entities: [Beneficiary, Document, Stay, SocialIntervention, Activity, Budget, User]
}

query getDashboardActivities {
  fn: import { getDashboardActivities } from "@src/dashboard/operations",
  entities: [Beneficiary, Document, SocialIntervention, User]
}

query getDashboardAlerts {
  fn: import { getDashboardAlerts } from "@src/dashboard/operations",
  entities: [Budget, Document, SocialIntervention, Beneficiary, User]
}

query getDashboardExpenses {
  fn: import { getDashboardExpenses } from "@src/dashboard/operations",
  entities: [Budget, User]
}
// #endregion

route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import { NotFoundPage } from "@src/client/components/NotFoundPage"
}
//#endregion
