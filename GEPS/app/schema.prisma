datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  SOCIAL_WORKER
  MEDICAL
  EDUCATIONAL
  TECHNICAL
  FINANCIAL
}

enum ActivityCategory {
  RECREATIONAL
  TRAINING
}

enum DocumentType {
  SOCIAL
  MEDICAL
  PSYCHOLOGICAL
}

enum DocumentStatus {
  ACTIVE
  ARCHIVED
  CLOSED
}

enum InterventionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum StayStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum ResourceType {
  FOOD
  MATERIAL
  MEDICAL
  EDUCATIONAL
}

enum EducationStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

enum ProgramStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectStatus {
  ACTIVE
  SUSPENDED
  ABANDONED
  SUCCESSFUL
}

enum ProjectProgress {
  IDEA
  STUDY
  PLAN
  STARTUP
  IN_PROGRESS
  COMPLETED
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  isAdmin                   Boolean         @default(false)

  files                     File[]
  
  // GEPS fields
  role                      UserRole        @default(SOCIAL_WORKER)
  firstName                 String?
  lastName                  String?
  phone                     String?
  isActive                  Boolean         @default(true)
  updatedAt                 DateTime        @updatedAt

  // GEPS relations
  socialInterventions       SocialIntervention[]
  stays                     Stay[]
  meals                     Meal[]
  activities                Activity[]
  activityParticipations    ActivityParticipation[]
  trainings                 Training[]
  entrepreneurialProjects   EntrepreneurialProject[]
  budgets                   Budget[]
  expenses                  Expense[]
  revenues                  Revenue[]
  documents                 Document[]
  enrollments               Enrollment[]
  educations                Education[]
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model Beneficiary {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  firstName                 String
  lastName                  String
  gender                    String
  dateOfBirth               DateTime
  phone                     String?
  address                   String?
  familySituation           String?
  professionalSituation     String?
  isActive                  Boolean         @default(true)

  // Relations
  documents                 Document[]
  stays                     Stay[]
  meals                     Meal[]
  activityParticipations    ActivityParticipation[]
  trainings                 Training[]
  entrepreneurialProjects   EntrepreneurialProject[]
  enrollments               Enrollment[]
  educations                Education[]
}

model Document {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  type                      DocumentType
  content                   String
  date                      DateTime
  status                    DocumentStatus  @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model SocialIntervention {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  title                     String
  description               String
  interventionDate          DateTime
  duration                  Int?            // in minutes
  location                  String?
  status                    InterventionStatus @default(PLANNED)

  // Relations
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model Stay {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  dormitory                 String
  bed                       String
  checkInDate               DateTime
  checkOutDate              DateTime?
  status                    StayStatus      @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model Meal {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  type                      MealType
  menu                      String
  preferences               String?         // allergies, special diets
  date                      DateTime
  quantity                  Int             @default(1)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model Resource {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  name                      String
  type                      ResourceType
  quantity                  Int
  unit                      String          // kg, units, liters, etc.
  module                    String?         // concerned module
  alertThreshold            Int?            // threshold to trigger restock alert
  isActive                  Boolean         @default(true)
}

model Education {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  institution               String
  level                     String
  academicYear              String
  results                   String?
  activeSupport             Boolean         @default(false)
  startDate                 DateTime
  endDate                   DateTime?
  status                    EducationStatus @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model Enrollment {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  program                   String
  module                    String?
  enrollmentDate            DateTime
  endDate                   DateTime?
  status                    ProgramStatus   @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model Activity {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  title                     String
  category                  ActivityCategory
  description               String?
  location                  String
  startDate                 DateTime
  endDate                   DateTime?
  capacity                  Int?
  status                    ActivityStatus  @default(PLANNED)

  // Relations
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  participations            ActivityParticipation[]
}

model ActivityParticipation {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  isPresent                 Boolean         @default(false)
  comment                   String?

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  activity                  Activity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId                String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  @@unique([beneficiaryId, activityId])
}

model Training {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  title                     String
  description               String?
  startDate                 DateTime
  endDate                   DateTime?
  location                  String?
  capacity                  Int?
  status                    ActivityStatus  @default(PLANNED)

  // Relations
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  beneficiaries             Beneficiary[]
}

model EntrepreneurialProject {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  title                     String
  description               String
  idea                      String
  mentoring                 String?
  progress                  ProjectProgress @default(IDEA)
  estimatedBudget           Float?
  status                    ProjectStatus   @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model Budget {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  module                    String
  year                      Int
  initialAmount             Float
  usedAmount                Float           @default(0)
  description               String?

  // Relations
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  expenses                  Expense[]
  revenues                  Revenue[]
}

model Expense {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  label                     String
  amount                    Float
  date                      DateTime
  category                  String?
  justification             String?

  // Relations
  budget                    Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId                  String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model Revenue {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  source                    String
  amount                    Float
  date                      DateTime
  description               String?

  // Relations
  budget                    Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId                  String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

