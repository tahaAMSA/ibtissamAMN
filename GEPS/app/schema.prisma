// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  PENDING_ROLE
  ADMIN
  DIRECTEUR
  AGENT_ACCUEIL
  COORDINATEUR
  ASSISTANTE_SOCIALE
  TRAVAILLEUR_SOCIAL
  CONSEILLER_JURIDIQUE
  RESPONSABLE_HEBERGEMENT
  RESPONSABLE_EDUCATION
  RESPONSABLE_ACTIVITES
  COMPTABLE
  GESTIONNAIRE_RESSOURCES
  DOCUMENTALISTE
  OBSERVATEUR
}

enum DocumentType {
  IDENTITY_CARD
  BIRTH_CERTIFICATE
  RESIDENCE_CERTIFICATE
  MEDICAL_CERTIFICATE
  SCHOOL_CERTIFICATE
  INCOME_CERTIFICATE
  FAMILY_COMPOSITION
  PHOTO
  OTHER
}

enum DocumentStatus {
  ACTIVE
  ARCHIVED
  EXPIRED
}

enum InterventionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum StayStatus {
  ACTIVE
  ENDED
  SUSPENDED
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum ResourceType {
  FOOD
  CLOTHING
  HYGIENE
  SCHOOL_SUPPLIES
  MEDICAL
  OTHER
}

enum EducationStatus {
  ACTIVE
  COMPLETED
  ABANDONED
  SUSPENDED
}

enum ProgramStatus {
  ACTIVE
  COMPLETED
  ABANDONED
  SUSPENDED
}

enum ActivityCategory {
  SPORTS
  CULTURAL
  EDUCATIONAL
  SOCIAL
  RECREATIONAL
  THERAPEUTIC
  OTHER
}

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectProgress {
  IDEA
  DEVELOPMENT
  IMPLEMENTATION
  FINALIZATION
  COMPLETED
}

enum ProjectStatus {
  ACTIVE
  SUSPENDED
  COMPLETED
  ABANDONED
}

// Enums for Beneficiary Form
enum StatutBeneficiaire {
  RESIDENTE
  MIGRANTE
  TOURISTE
  REFUGIEE
  EN_TRANSIT
  AUTRE
}

enum StatutMatrimonial {
  CELIBATAIRE
  MARIEE_AVEC_CONTRAT
  MARIEE_SANS_CONTRAT
  DIVORCEE
  VEUVE
  FIANCEE
  MERE_CELIBATAIRE
  AUTRE
}

enum TypeLogement {
  MAISON_FAMILIALE
  AVEC_FAMILLE_EPOUSE
  AVEC_FAMILLE_EPOUX
  INDEPENDANT
}

enum SituationSante {
  MALADIE_CHRONIQUE
  MALADIE_MENTALE
  HANDICAP_SENSORIEL
  HANDICAP_MOTEUR
  HANDICAP_INTELLECTUEL
  ENCEINTE
  NORMALE
}

enum NiveauEducation {
  ANALPHABETE
  PRIMAIRE
  COLLEGE
  LYCEE
  UNIVERSITAIRE
  AUTRE
}

enum ActiviteProfessionnelle {
  FEMME_MENAGE
  EMPLOYEE
  FONCTIONNAIRE
  PROFESSION_LIBERALE
  ETUDIANTE
  AU_FOYER
  SANS_EMPLOI
  RETRAITEE
  AUTRE
}

enum StatutDossier {
  PREMIERES_ETAPES
  MI_PARCOURS
  AVANCEE
  TRES_AVANCEE
  TERMINEE
}

enum TrancheAge {
  MOINS_18
  AGE_18_25
  AGE_26_30
  AGE_31_35
  AGE_36_40
  AGE_41_45
  AGE_46_50
  PLUS_50
}

enum BeneficiaryType {
  FEMME
  ENFANT
}

enum UserStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SUSPENDED
}

enum NotificationType {
  BENEFICIARY_ARRIVAL
  ORIENTATION_REQUEST
  FORM_COMPLETION
  SYSTEM_ALERT
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum BeneficiaryStatus {
  EN_ATTENTE_ACCUEIL    // Bénéficiaire créé par accueil
  EN_ATTENTE_ORIENTATION // Attend orientation par directeur/coordinateur
  ORIENTE               // Orienté vers assistante sociale
  EN_SUIVI              // En cours de suivi
  TERMINE               // Dossier terminé
}

enum MotifVisite {
  VIOLENCE_CONJUGALE
  VIOLENCE_FAMILIALE
  AGRESSION_SEXUELLE
  HARCELEMENT
  DISCRIMINATION
  PROBLEMES_FAMILIAUX
  SOUTIEN_PSYCHOLOGIQUE
  AIDE_JURIDIQUE
  HEBERGEMENT_URGENCE
  AIDE_FINANCIERE
  ORIENTATION_PROFESSIONNELLE
  FORMATION
  SOINS_MEDICAUX
  PROTECTION_ENFANT
  ACCOMPAGNEMENT_SOCIAL
  INFORMATION_DROITS
  AUTRE
}

// Enum pour le sexe
enum Gender {
  HOMME
  FEMME
  AUTRE
}

// Enums pour le système d'organisation
enum OrganizationStatus {
  ACTIVE          // Organisation active
  SUSPENDED       // Organisation suspendue
  PENDING_SETUP   // En cours de configuration
  DELETED         // Supprimée (soft delete)
}

enum PlanType {
  FREE           // Plan gratuit (limité)
  PROFESSIONAL   // Plan professionnel
  ENTERPRISE     // Plan entreprise
}

// Models
model Organization {
  id                        String              @id @default(uuid())
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  
  // Informations de base
  name                      String              // Nom de l'association/organisation
  slug                      String              @unique // Identifiant URL unique
  logo                      String?             // URL du logo
  description               String?             // Description de l'organisation
  
  // Statut et plan
  status                    OrganizationStatus  @default(ACTIVE)
  plan                      PlanType            @default(FREE)
  
  // Limites selon le plan
  maxUsers                  Int                 @default(50)        // Max utilisateurs
  maxBeneficiaries          Int                 @default(500)       // Max bénéficiaires
  maxStorage                Int                 @default(1000)      // Max stockage en MB
  
  // Informations de contact
  adminEmail                String              // Email de l'admin principal
  phone                     String?             // Téléphone
  address                   String?             // Adresse physique
  website                   String?             // Site web
  
  // Facturation
  billingEmail              String?             // Email de facturation
  subscriptionEndDate       DateTime?           // Date de fin d'abonnement
  
  // Relations - Toutes les données appartiennent à l'organisation
  users                     User[]
  beneficiaries             Beneficiary[]
  documents                 Document[]
  socialInterventions       SocialIntervention[]
  stays                     Stay[]
  meals                     Meal[]
  resources                 Resource[]
  educations                Education[]
  enrollments               Enrollment[]
  activities                Activity[]
  trainings                 Training[]
  entrepreneurialProjects   EntrepreneurialProject[]
  budgets                   Budget[]
  timeSessions              TimeSession[]
  notifications             Notification[]
  roles                     Role[]
  
  // Index pour performance
  @@index([slug])
  @@index([status])
  @@index([adminEmail])
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  email                     String?         @unique
  username                  String?         @unique
  isAdmin                   Boolean         @default(false)
  files                     File[]
  role                      UserRole        @default(PENDING_ROLE)
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization?   @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String?
  
  // Noms en français
  firstName                 String?         // Prénom en français
  lastName                  String?         // Nom en français
  
  // Noms en arabe
  firstNameAr               String?         // الاسم الأول
  lastNameAr                String?         // اسم العائلة
  
  // Informations personnelles
  gender                    Gender?         // Sexe
  avatar                    String?         // URL de l'image de profil
  phone                     String?
  dateOfBirth               DateTime?       // Date de naissance
  
  // Statut
  isActive                  Boolean         @default(true)
  updatedAt                 DateTime        @updatedAt
  
  // Système d'approbation
  status                    UserStatus      @default(PENDING_APPROVAL)
  approvedBy                User?           @relation("UserApproval", fields: [approvedById], references: [id])
  approvedById              String?
  approvedAt                DateTime?
  rejectionReason           String?
  
  // Rôle personnalisé (pour le système de permissions avancé)
  customRole                Role?           @relation(fields: [customRoleId], references: [id])
  customRoleId              String?
  
  // Relations d'approbation
  approvedUsers             User[]          @relation("UserApproval")

  // GEPS relations
  socialInterventions       SocialIntervention[]
  stays                     Stay[]
  meals                     Meal[]
  activities                Activity[]
  activityParticipations    ActivityParticipation[]
  trainings                 Training[]
  entrepreneurialProjects   EntrepreneurialProject[]
  budgets                   Budget[]
  expenses                  Expense[]
  revenues                  Revenue[]
  documents                 Document[]
  enrollments               Enrollment[]
  educations                Education[]
  timeSessions              TimeSession[]
  
  // Relations notifications
  sentNotifications         Notification[]  @relation("NotificationSender")
  receivedNotifications     Notification[]  @relation("NotificationReceiver")
  
  // Relations du cycle de vie des bénéficiaires
  createdBeneficiaries      Beneficiary[]   @relation("BeneficiaryCreatedBy")
  orientedBeneficiaries     Beneficiary[]   @relation("BeneficiaryOrientedBy")  
  assignedBeneficiaries     Beneficiary[]   @relation("BeneficiaryAssignedTo")
  
  // Index pour performance multi-tenant
  @@index([organizationId])
  @@index([organizationId, email])
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model Beneficiary {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  
  // Type de bénéficiaire (FEMME ou ENFANT)
  beneficiaryType           BeneficiaryType @default(FEMME)
  
  // Statut dans le processus d'accueil
  status                    BeneficiaryStatus @default(EN_ATTENTE_ACCUEIL)
  
  // Informations d'accueil (visibles par agent d'accueil)
  visitReason               MotifVisite?    // Motif de la visite
  visitReasonOther          String?         // Autre motif (si AUTRE sélectionné)
  
  // Traçabilité du cycle de vie du dossier
  // 1. Qui a fait l'accueil
  createdBy                 User?           @relation("BeneficiaryCreatedBy", fields: [createdById], references: [id])
  createdById               String?
  
  // 2. Qui a orienté le dossier
  orientedBy                User?           @relation("BeneficiaryOrientedBy", fields: [orientedById], references: [id])
  orientedById              String?
  orientedAt                DateTime?
  orientationReason         String?         // Raison de l'orientation
  
  // 3. Qui traite le dossier (assistante sociale)
  assignedTo                User?           @relation("BeneficiaryAssignedTo", fields: [assignedToId], references: [id])
  assignedToId              String?
  assignedAt                DateTime?
  
  // Informations basiques
  firstName                 String
  lastName                  String
  gender                    String
  dateOfBirth               DateTime
  phone                     String?
  address                   String?
  familySituation           String?
  professionalSituation     String?
  isActive                  Boolean         @default(true)
  
  // Informations supplémentaires
  emergencyContact          String?
  emergencyPhone            String?
  nationalId                String?
  birthPlace                String?
  maritalStatus             String?
  numberOfChildren          Int?            @default(0)
  monthlyIncome             Int?            @default(0)
  educationLevel            String?
  healthConditions          String?
  notes                     String?
  
  // Informations entretien
  intervenanteName          String?
  interviewDuration         String?
  
  // Historique avec le centre
  dejabeneficie             Boolean?        @default(false)
  dateBeneficePrecedent     DateTime?
  numDossierPrecedent       String?
  declarationViolenceCellule String[]
  
  // Identité détaillée
  nomComplet                String?
  age                       Int?
  nationalite               String?
  cni                       String?
  statut                    StatutBeneficiaire?
  
  // Dossier
  numDossier                String?
  annee                     Int?
  dateOuverture             DateTime?
  statutDossier             StatutDossier?
  
  // Motifs de la visite
  motifs                    String[]
  
  // Canal de connaissance
  canaux                    String[]
  
  // Origine de l'orientation
  sourcesOrientation        String[]
  
  // Profil personnel détaillé
  trancheAge                TrancheAge?
  ageMariage                Int?
  nbEnfants                 Int?
  dureeMariageCourant       String?
  mariagePrecedent          Boolean?
  statutMatrimonial         StatutMatrimonial?
  logement                  TypeLogement?
  sante                     SituationSante[]
  education                 NiveauEducation?
  profession                ActiviteProfessionnelle?
  
  // Violences (JSON pour stocker la structure complexe)
  violencePhysique          Json?
  violencePsychologique     Json?
  violenceSexuelle          Json?
  violenceEconomique        Json?
  violenceElectronique      Json?
  
  // Informations sur l'agresseur
  agresseurInfo             Json?
  
  // Description et documents
  description               String?
  rapport                   String?
  piecesJointes             String[]
  
  // Services et suivi
  proceduresJuridiques      Json?
  proceduresAdministratives Json?
  hebergement               Boolean?        @default(false)
  priseEnChargeDistance     Boolean?        @default(false)
  orientationInterne        String[]
  orientationExterne        String[]
  satisfaction              String?
  resultatFinal             String?

  // Relations
  documents                 Document[]
  stays                     Stay[]
  meals                     Meal[]
  activityParticipations    ActivityParticipation[]
  trainings                 Training[]
  entrepreneurialProjects   EntrepreneurialProject[]
  enrollments               Enrollment[]
  educations                Education[]
  timeSessions              TimeSession[]
  notifications             Notification[]  @relation("BeneficiaryNotification")
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, createdAt])
}

model Document {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  type                      DocumentType
  content                   String
  date                      DateTime
  status                    DocumentStatus  @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model SocialIntervention {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  title                     String
  description               String
  interventionDate          DateTime
  duration                  Int?            // in minutes
  location                  String?
  status                    InterventionStatus @default(PLANNED)

  // Relations
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model Stay {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  dormitory                 String
  bed                       String
  checkInDate               DateTime
  checkOutDate              DateTime?
  status                    StayStatus      @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model Meal {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  type                      MealType
  menu                      String
  preferences               String?         // allergies, special diets
  date                      DateTime
  quantity                  Int             @default(1)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model Resource {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  name                      String
  type                      ResourceType
  quantity                  Int
  unit                      String          // kg, units, liters, etc.
  module                    String?         // concerned module
  alertThreshold            Int?            // threshold to trigger restock alert
  isActive                  Boolean         @default(true)
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model Education {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  institution               String
  level                     String
  academicYear              String
  results                   String?
  activeSupport             Boolean         @default(false)
  startDate                 DateTime
  endDate                   DateTime?
  status                    EducationStatus @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model Enrollment {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  program                   String
  module                    String?
  enrollmentDate            DateTime
  endDate                   DateTime?
  status                    ProgramStatus   @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model Activity {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  title                     String
  category                  ActivityCategory
  description               String?
  location                  String
  startDate                 DateTime
  endDate                   DateTime?
  capacity                  Int?
  status                    ActivityStatus  @default(PLANNED)

  // Relations
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  participations            ActivityParticipation[]
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model ActivityParticipation {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  isPresent                 Boolean         @default(false)
  comment                   String?

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  activity                  Activity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId                String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  @@unique([beneficiaryId, activityId])
  // Note: L'organizationId sera hérité via beneficiary et activity
}

model Training {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  title                     String
  description               String?
  startDate                 DateTime
  endDate                   DateTime?
  location                  String?
  capacity                  Int?
  status                    ActivityStatus  @default(PLANNED)

  // Relations
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  beneficiaries             Beneficiary[]
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model EntrepreneurialProject {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  title                     String
  description               String
  idea                      String
  mentoring                 String?
  progress                  ProjectProgress @default(IDEA)
  estimatedBudget           Float?
  status                    ProjectStatus   @default(ACTIVE)

  // Relations
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model Budget {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  module                    String
  year                      Int
  initialAmount             Float
  usedAmount                Float           @default(0)
  description               String?

  // Relations
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  expenses                  Expense[]
  revenues                  Revenue[]
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
}

model Expense {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  label                     String
  amount                    Float
  date                      DateTime
  category                  String?
  justification             String?

  // Relations
  budget                    Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId                  String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model Revenue {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  source                    String
  amount                    Float
  date                      DateTime
  description               String?

  // Relations
  budget                    Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId                  String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
}

model TimeSession {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  
  // Temps de session
  startTime                 DateTime
  endTime                   DateTime?
  durationMinutes           Int?            // Calculé automatiquement
  
  // Informations contextuelles
  activityType              String          @default("CONSULTATION_DOSSIER") // Type d'activité
  notes                     String?         // Notes optionnelles sur l'activité
  isActive                  Boolean         @default(true) // Session en cours ou terminée
  
  // Relations
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  beneficiary               Beneficiary     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId             String
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
  @@index([beneficiaryId, userId])
  @@index([createdAt])
  @@index([isActive])
}

model Notification {
  id                        String            @id @default(uuid())
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  
  // Contenu de la notification
  type                      NotificationType
  title                     String
  message                   String
  status                    NotificationStatus @default(UNREAD)
  
  // Relations
  sender                    User              @relation("NotificationSender", fields: [senderId], references: [id])
  senderId                  String
  receiver                  User              @relation("NotificationReceiver", fields: [receiverId], references: [id])
  receiverId                String
  
  // Lien vers le bénéficiaire concerné (optionnel)
  beneficiary               Beneficiary?      @relation("BeneficiaryNotification", fields: [beneficiaryId], references: [id])
  beneficiaryId             String?
  
  // Métadonnées supplémentaires (JSON pour flexibilité)
  metadata                  Json?
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization      @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant
  @@index([organizationId])
  @@index([receiverId, status])
  @@index([createdAt])
  @@index([type])
}

// === SYSTÈME DE RÔLES ET PERMISSIONS AVANCÉ ===

model Role {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  
  // Informations du rôle
  name                      String          // Nom unique par organisation
  description               String?
  isActive                  Boolean         @default(true)
  
  // Relations
  permissions               Permission[]
  users                     User[]
  
  // Appartenance à l'organisation (multi-tenant)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId            String
  
  // Index pour performance multi-tenant (nom unique par organisation)
  @@index([organizationId])
  @@unique([organizationId, name])
}

model Permission {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  
  // Définition de la permission
  module                    String          // Module (BENEFICIARIES, DOCUMENTS, etc.)
  action                    String          // Action (CREATE, READ, UPDATE, DELETE, etc.)
  ownRecordsOnly            Boolean         @default(false)  // Restreint aux enregistrements créés par l'utilisateur
  
  // Relation avec le rôle
  role                      Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId                    String
  
  // Index unique pour éviter les doublons
  @@unique([roleId, module, action])
}
